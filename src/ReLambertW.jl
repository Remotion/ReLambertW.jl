"""
    module ReLambertW

Julia module to compute real Lambert-W Function also known as product-log.
This module also includes Wright omega function as well.
Lambert W is the solution to the equation  w*exp(w) = x.
Wright omega function is the solution to the equation y + ln(y) = x

Functions: `lambertw0(z)`, `lambertwm1(z)`, `lambertw0_fast(z)`, `lambertwm1_fast(z)`, `womega(x)`
Constants: `omega`, `Ω`

"""
module ReLambertW

export lambertw0, lambertwm1, lambertw0_fast, lambertwm1_fast, womega, omega, Ω

# Halley’s method  https://file.scirp.org/pdf/AM_2013060409554653.pdf
@inline function halley_lambertw(y ::T, x ::T) where T <: Number # 1*exp, 2*div, 4*mul
    ey = exp(y);         # eʸ
    yeyx = y*ey-x;       # y*eʸ - x
    yeyx==0 && return y;
    y1 = y+1;
    return y - (yeyx / (y1*ey - (y+2)*yeyx/(2*y1)));
end

# 4.2  Modified methods:  http://numbers.computation.free.fr/Constants/Algorithms/newton.html
@inline function quartic_m4(y ::T, x ::T) where T <: Number # 1*exp, 4*div, 3*idiv, 18*mul
    ey = exp(y);         # eʸ
    f = y*ey;           # y*eʸ
    f_x = f - x;        # actually f is y*eʸ - x 
    f_x==0 && return y;
    df = f + ey;        # f' = eʸ+ yeʸ
    ddf = df + ey;      # f'' = 2eʸ+ yeʸ
    dddf = ddf + ey;    # f''' = 3eʸ+ yeʸ
    ddddf = dddf + ey;  # f''' = 4eʸ+ yeʸ
    f = f_x;       
    h = -f/df; # div
    h2 = h*h
    a2 = -ddf/df; # div
    df2 = df*df
    ddf2 = ddf*ddf
    a3 = (-df*dddf + 3*ddf2)/(df2) # div
    a4 = (-df2*ddddf + 10*df*ddf*dddf - 15*ddf2*ddf)/(df2*df) # div
    return y + h * (1 + a2*h/2 + a3*h2/6 + a4*h*h2/24) # 3*idiv
end


#! lambertw0() and lambertwm1() functions

# NOTICE: Input arguement is NOT z but its com <= ent def !=  as zc = z+1/e
@inline @fastmath function lambert_dw0c(zc ::Float64) ::Float64
    #   50-bit accuracy computation of principal branch of Lambert W function, W_0(z),
    #   by piecewise minimax rational function approximation
    #
    #   NOTICE: Input arguement is NOT z but its com <= ent def !=  as zc = z+1/e
    #
    #   Coded by T. Fukushima <Toshio.Fukushima@nao.ac.jp>
    #
    #   Reference: T. Fukushima (2020) to be submitted
    #     "Precise and fast computation of Lambert W-functions by piecewise
    #      rational function approximation with varia <= transformation"
 
    if (zc < 0.0) 
       throw(DomainError("argument out of ra >=  zc= $zc."))
       return NaN;
   elseif (zc <= 2.5498939065034735716)        # W <= 0.893, X_1
       x=sqrt(zc)
       dw0c = ( -0.9999999999999998890 + x*( -2.7399668668203659304+ x*( 0.026164207726990399347 + x*( 6.370916807894900917+ x*( 7.101328651785402668 + x*( 2.9800826783006852573+ x*( 0.48819596813789865043 + x*( 0.023753035787333611915+ x*( 0.00007736576009377243100 )))))))))/( 1.0 + x*( 5.071610848417428005+ x*( 9.986838818354528337 + x*( 9.660755192207886908+ x*( 4.7943728991336119052 + x*( 1.1629703477704522300+ x*( 0.11849462500733755233 + x*( 0.0034326525132402226488 ))))))))
   elseif (zc <= 43.613924462669367895)    # W <= 2.754, X_2
       x=sqrt(zc)
       dw0c = ( -0.99997801800578916749 + x*( -0.70415751590483602272+ x*( 2.1232260832802529071 + x*( 2.3896760702935718341+ x*( 0.77765311805029175244 + x*( 0.089686698993644741433+ x*( 0.0033062485753746403559 + x*( 0.000025106760479132851033))))))))/( 1.0 + x*( 3.0356026828085410884+ x*( 3.1434530151286777057 + x*( 1.3723156566592447275+ x*( 0.25844697415744211142 + x*( 0.019551162251819044265+ x*( 0.00048775933244530123101 + x*( 2.3165116841073152717e-6 ))))))))
   elseif (zc <= 598.45353371878276946)    # W <= 4.821, X_3
       x=sqrt(zc)
       dw0c = ( -0.98967420337273506393 + x*( 0.59587680606394382748+ x*( 1.4225083018151943148 + x*( 0.44882889168323809798+ x*( 0.044504943332390033511 + x*( 0.0015218794835419578554+ x*( 0.000016072263556502220023 + x*( 3.3723373020306510843e-8))))))))/( 1.0 + x*( 1.6959402394626198052+ x*( 0.80968573415500900896 + x*( 0.14002034999817021955+ x*( 0.0093571878493790164480 + x*( 0.00023251487593389773464+ x*( 1.8060170751502988645e-6 + x*( 2.5750667337015924224e-9 ))))))))
   elseif (zc <= 8049.4919850757619109)    # W <= 7.041, X_4
       x=sqrt(zc)
       dw0c = ( -0.77316491997206225517 + x*( 1.1391333504296703783+ x*( 0.43116117255217074492 + x*( 0.035773078319037507449+ x*( 0.00096441640580559092740 + x*( 8.9723854598675864757e-6+ x*( 2.5623503144117723217e-8 + x*( 1.4348813778416631453e-11))))))))/( 1.0 + x*( 0.74657287456514418083+ x*( 0.12629777033419350576 + x*( 0.0069741512959563184881+ x*( 0.00014089339244355354892 + x*( 1.0257432883152943078e-6+ x*( 2.2902687190119230940e-9 + x*( 9.2794231013264501664e-13 ))))))))
   elseif (zc <= 111124.95412121781420)    # W <= 9.380, X_5
       x=sqrt(zc)
       dw0c = ( 0.12007101671553688430 + x*( 0.83352640829912822896+ x*( 0.070142775916948337582 + x*( 0.0014846357985475124849+ x*( 0.000010478757366110155290 + x*( 2.5715892987071038527e-8+ x*( 1.9384214479606474749e-11 + x*( 2.8447049039139409652e-15))))))))/( 1.0 + x*( 0.25396738845619126630+ x*( 0.012839238907330317393 + x*( 0.00020275375632510997371+ x*( 1.1482956073449141384e-6 + x*( 2.3188370605674263647e-9+ x*( 1.4271994165742563419e-12 + x*( 1.5884836942394796961e-16 ))))))))
   elseif (zc <= 1.5870429812082297112e6)    # W <= 11.809, X_6
       x=sqrt(zc)
       dw0c = ( 1.7221104439937710112 + x*( 0.39919594286484275605+ x*( 0.0079885540140685028937 + x*( 0.000042889742253257920541+ x*( 7.8146828180529864981e-8 + x*( 4.9819638764354682359e-11+ x*( 9.7650889714265294606e-15 + x*( 3.7052997281721724439e-19))))))))/( 1.0 + x*( 0.074007438118020543008+ x*( 0.0010333501506697740545 + x*( 4.4360858035727508506e-6+ x*( 6.7822912316371041570e-9 + x*( 3.6834356707639492021e-12+ x*( 6.0836159560266041168e-16 + x*( 1.8149869335981225316e-20 ))))))))
   elseif (zc <= 2.3414708401875459509e7)    # W <= 14.308, X_7
       x=sqrt(zc)
       dw0c = ( 3.7529314023434544256 + x*( 0.15491342690357806525+ x*( 0.00075663140675900784505 + x*( 1.0271609235969979059e-6+ x*( 4.7853247675930066150e-10 + x*( 7.8328040770275474410e-14+ x*( 3.9433033758391036653e-18 + x*( 3.8232862205660283978e-23))))))))/( 1.0 + x*( 0.020112985338854443555+ x*( 0.000074712286154830141768 + x*( 8.4800598003693837469e-8+ x*( 3.4182424130376911762e-11 + x*( 4.8866259139690957899e-15+ x*( 2.1223373626834634178e-19 + x*( 1.6642985671260582515e-24 ))))))))
   elseif (zc <= 3.5576474308009965225e8)    # W <= 16.865, X_8
       x=sqrt(zc)
       dw0c = ( 6.0196542055606555577 + x*( 0.053496672841797864762+ x*( 0.000064340849275316501519 + x*( 2.1969090100095967485e-8+ x*( 2.5927988937033061070e-12 + x*( 1.0779198161801527308e-16+ x*( 1.3780424091017898301e-21 + x*( 3.3768973150742552802e-27))))))))/( 1.0 + x*( 0.0052809683704233371675+ x*( 5.1020501219389558082e-6 + x*( 1.5018312292270832103e-9+ x*( 1.5677706636413188379e-13 + x*( 5.7992041238911878361e-18+ x*( 6.5133170770320780259e-23 + x*( 1.3205080139213406071e-28 ))))))))
   elseif (zc <= 5.5501716296163627854e9)    # W <= 19.468, X_9
       x=sqrt(zc)
       dw0c = ( 8.4280268500989701597 + x*( 0.017155758546279713315+ x*( 5.0836620669829321508e-6 + x*( 4.3354903691832581802e-10+ x*( 1.2841017145645583385e-14 + x*( 1.3419106769745885927e-19+ x*( 4.3101698455492225750e-25 + x*( 2.6422433422088187549e-31))))))))/( 1.0 + x*( 0.0013572006754595300315+ x*( 3.3535243481426203694e-7 + x*( 2.5206969246421264128e-11+ x*( 6.7136226273060530496e-16 + x*( 6.3324226680854686574e-21+ x*( 1.8128167400013774194e-26 + x*( 9.3662030058136796889e-33 ))))))))
   elseif (zc <= 8.8674704839657775331e10)   # W <= 22.112, X_10
       x=sqrt(zc)
       dw0c = ( 10.931063230472498189 + x*( 0.0052224234540245532982+ x*( 3.7996105711810129682e-7 + x*( 8.0305793533410355824e-12+ x*( 5.9139785627090605866e-17 + x*( 1.5382020359533028724e-22+ x*( 1.2288944126268109432e-28 + x*( 1.8665089270660122398e-35))))))))/( 1.0 + x*( 0.00034328702551197577797+ x*( 2.1395351518538844476e-8 + x*( 4.0524170186631594159e-13+ x*( 2.7181424315335710420e-18 + x*( 6.4538986638355490894e-24+ x*( 4.6494613785888987942e-30 + x*( 6.0442024367299387616e-37 ))))))))
   elseif (zc <= 1.4477791865272902816e12)   # W <= 24.791, X_11
       x=sqrt(zc)
       dw0c = ( 13.502943080893871412 + x*( 0.0015284636506346264572+ x*( 2.7156967358262346166e-8 + x*( 1.4110394051242161772e-13+ x*( 2.5605734311219728461e-19 + x*( 1.6421293724425337463e-25+ x*( 3.2324944691435843553e-32 + x*( 1.2054662641251783155e-39))))))))/( 1.0 + x*( 0.000085701512879089462255+ x*( 1.3311244435752691563e-9 + x*( 6.2788924440385347269e-15+ x*( 1.0483788152252204824e-20 + x*( 6.1943499966249160886e-27+ x*( 1.1101567860340917294e-33 + x*( 3.5897381128308962590e-41 ))))))))
   elseif (zc <= 2.4111458632511851931e13)   # W <= 27.500, X_12
       x=sqrt(zc)
       dw0c = ( 16.128076167439014775 + x*( 0.00043360385176467069131+ x*( 1.8696403871820916466e-9 + x*( 2.3691795766901486045e-15+ x*( 1.0503191826963154893e-21 + x*( 1.6461927573606764263e-28+ x*( 7.9138276083474522931e-36 + x*( 7.1845890343701668760e-44))))))))/( 1.0 + x*( 0.000021154255263102938752+ x*( 8.1006115442323280538e-11 + x*( 9.4155986022169905738e-17+ x*( 3.8725127902295302254e-23 + x*( 5.6344651115570565066e-30+ x*( 2.4860951084210029191e-37 + x*( 1.9788304737427787405e-45 ))))))))
   elseif (zc <= 4.0897036442600845564e14)   # W <= 30.236, X_13
       x=sqrt(zc)
       dw0c = ( 18.796301105534486604 + x*( 0.00011989443339646469157+ x*( 1.2463377528676863250e-10 + x*( 3.8219456858010368172e-17+ x*( 4.1055693930252083265e-24 + x*( 1.5595231456048464246e-31+ x*( 1.8157173553077986962e-39 + x*( 3.9807997764326166245e-48))))))))/( 1.0 + x*( 5.1691031988359922329e-6+ x*( 4.8325571823313711932e-12 + x*( 1.3707888746916928107e-18+ x*( 1.3754560850024480337e-25 + x*( 4.8811882975661805184e-33+ x*( 5.2518641828170201894e-41 + x*( 1.0192119593134756440e-49 ))))))))
   elseif (zc <= 7.0555901476789972402e15)   # W <= 32.996, X_14
       x=sqrt(zc)
       dw0c = ( 21.500582830667332906 + x*( 0.000032441943237735273768+ x*( 8.0764963416837559148e-12 + x*( 5.9488445506122883523e-19+ x*( 1.5364106187215861531e-26 + x*( 1.4033231297002386995e-34+ x*( 3.9259872712305770430e-43 + x*( 2.0629086382257737517e-52))))))))/( 1.0 + x*( 1.2515317642433850197e-6+ x*( 2.8310314214817074806e-13 + x*( 1.9423666416123637998e-20+ x*( 4.7128616004157359714e-28 + x*( 4.0433347391839945960e-36+ x*( 1.0515141443831187271e-44 + x*( 4.9316490935436927307e-54 ))))))))
   elseif (zc <= 1.2366607557976727287e17)   # W <= 35.779, X_15
       x=sqrt(zc)
       dw0c = ( 24.235812532416977267 + x*( 8.6161505995776802509e-6+ x*( 5.1033431561868273692e-13 + x*( 8.9642393665849638164e-21+ x*( 5.5254364181097420777e-29 + x*( 1.2045072724050605792e-37+ x*( 8.0372997176526840184e-47 + x*( 1.0049140812146492611e-56))))))))/( 1.0 + x*( 3.0046761844749477987e-7+ x*( 1.6309104270855463223e-14 + x*( 2.6842271030298931329e-22+ x*( 1.5619672632458881195e-30 + x*( 3.2131689030397984274e-39+ x*( 2.0032396245307684134e-48 + x*( 2.2520274554676331938e-58 ))))))))
   elseif (zc <= 2.1999373487930999775e18)   # W <= 38.582, X_16
       x=sqrt(zc)
       dw0c = ( 26.998134347987436511 + x*( 2.2512257767572285866e-6+ x*( 3.1521230759866963941e-14 + x*( 1.3114035719790631541e-22+ x*( 1.9156784033962366146e-31 + x*( 9.8967003053444799163e-41+ x*( 1.5640423898448433548e-50 + x*( 4.6216193040664872606e-61))))))))/( 1.0 + x*( 7.1572676370907573898e-8+ x*( 9.2500506091115760826e-16 + x*( 3.6239819582787573031e-24+ x*( 5.0187712493800424118e-33 + x*( 2.4565861988218069039e-42+ x*( 3.6435658433991660284e-52 + x*( 9.7432490640155346004e-63 ))))))))
   elseif (zc <= 3.9685392198344016155e19)   # W <= 41.404, X_17
       x=sqrt(zc)
       dw0c = ( 29.784546702831970770 + x*( 5.7971764392171329944e-7+ x*( 1.9069872792601950808e-15 + x*( 1.8668700870858763312e-24+ x*( 6.4200510953370940075e-34 + x*( 7.8076624650818968559e-44+ x*( 2.9029638696956315654e-54 + x*( 2.0141870458566179853e-65))))))))/( 1.0 + x*( 1.6924463180469706372e-8+ x*( 5.1703934311254540111e-17 + x*( 4.7871532721560069095e-26+ x*( 1.5664405832545149368e-35 + x*( 1.8113137982381331398e-45+ x*( 6.3454150289495419529e-56 + x*( 4.0072964025244397967e-67 ))))))))
   elseif (zc <= 1.4127075145274652069e104)   # W <= 234.358, U_18
       y=log(zc) #? log 
       dw0c = ( 0.74413499460126776143 + y*( 0.41403243618005911160+ y*( 0.26012564166773416170 + y*( 0.021450457095960295520+ y*( 0.00051872377264705907577 + y*( 4.3574693568319975996e-6+ y*( 1.2363066058921706716e-8 + y*( 9.0194147766309957537e-12))))))))/( 1.0 + y*( 0.33487811067467010907+ y*( 0.023756834394570626395 + y*( 0.00054225633008907735160+ y*( 4.4378980052579623037e-6 + y*( 1.2436585497668099330e-8+ y*( 9.0225825867631852215e-12 + y*( -4.2057836270109716654e-19 ))))))))
   else    #   U_19
       y=log(zc) #? log 
       dw0c = ( -0.61514412812729761526 + y*( 0.67979310133630936580+ y*( 0.089685353704585808963 + y*( 0.0015644941483989379249+ y*( 7.7349901878176351162e-6 + y*( 1.2891647546699435229e-8+ y*( 7.0890325988973812656e-12 + y*( 9.8419790334279711453e-16))))))))/( 1.0 + y*( 0.097300263710401439315+ y*( 0.0016103672748442058651 + y*( 7.8247741003077000012e-6+ y*( 1.2949261308971345209e-8 + y*( 7.0986911219342827130e-12+ y*( 9.8426285042227044979e-16 + y*( -1.5960147252606055352e-24 ))))))))
   end
   return dw0c
end

# NOTICE:  == ired are two input arguements z and its com <= ent def !=  as zc = z+1/e
@inline @fastmath function lambert_dwm1c(z ::Float64, zc ::Float64) ::Float64
    #   50-bit accuracy computation of secondary branch of Lambert W function, W_-1(z),
    #   by piecewise minimax rational function approximation
    #
    #   NOTICE:  == ired are two input arguements z and its com <= ent def !=  as zc = z+1/e
    #
    #   Coded by T. Fukushima <Toshio.Fukushima@nao.ac.jp>
    #
    #   Reference: T. Fukushima (2020) to be submitted
    #     "Precise and fast computation of Lambert W-functions by piecewise
    #      rational function approximation with varia <= transformation"
 
    z0 = -0.36787944117144232160    # z0 = -1/e
    x0 = +0.60653065971263342360    # x0 = sqrt(1/e)
 
    if (zc < 0.0) 
       throw(DomainError("argument out of ra >=  zc= $zc."))
       return NaN;
   elseif (z <= -0.3542913309442164)          # W >= -1.3, X_-1
       x=sqrt(zc)
       dwm1c = ( -1.0000000000000001110 + x*( 4.2963016178777127009+ x*( -4.0991407924007457612 + x*( -6.8442842200833309724+ x*( 17.084773793345271001 + x*( -13.015133123886661124+ x*( 3.9303608629539851049 + x*( -0.34636746512247457319))))))))/( 1.0 + x*( -6.6279455994747624059+ x*( 17.740962374121397994 + x*( -24.446872319343475890+ x*( 18.249006287190617068 + x*( -7.0580758756624790550+ x*( 1.1978786762794003545 + x*( -0.053875778140352599789 ))))))))
   elseif (z <= -0.18872688282289434049)          # W >= -2.637, Y_-1
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -8.2253155264446844854 + x*( -813.20706732001487178+ x*( -15270.113237678509000 + x*( -79971.585089674149237+ x*( -103667.54215808376511 + x*( 42284.755505061257427+ x*( 74953.525397605484884 + x*( 10554.369146366736811))))))))/( 1.0 + x*( 146.36315161669567659+ x*( 3912.4761372539240712 + x*( 31912.693749754847460+ x*( 92441.293717108619527 + x*( 94918.733120470346165+ x*( 29531.165406571745340 + x*( 1641.6808960330370987 ))))))))
   elseif (z <= -0.060497597226958343647)     # W >= -4.253, Y_-2
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -9.6184127443354024295 + x*( -3557.8569043018004121+ x*( -254015.59311284381043 + x*( -5.3923893630670639391e6+ x*( -3.6638257417536896798e7 + x*( -6.1484319486226966213e7+ x*( 3.0421690377446134451e7 + x*( 3.9728139054879320452e7))))))))/( 1.0 + x*( 507.40525628523300801+ x*( 46852.747159777876192 + x*( 1.3168304640091436297e6+ x*( 1.3111690693712415242e7 + x*( 4.6142116445258015195e7+ x*( 4.8982268956208830876e7 + x*( 9.1959100987983855122e6 ))))))))
   elseif (z <= -0.017105334740676008194)     # W >= -5.832, Y_-3
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -11.038489462297466388 + x*( -15575.812882656619195+ x*( -4.2492947304897773433e6 + x*( -3.5170245938803423768e8+ x*( -9.8659163036611364640e9 + x*( -8.6195372303305003908e10+ x*( -1.3286335574027616000e11 + x*( 1.5989546434420660462e11))))))))/( 1.0 + x*( 1837.0770693017166818+ x*( 612840.97585595092761 + x*( 6.2149181398465483037e7+ x*( 2.2304011314443083969e9 + x*( 2.8254232485273698021e10+ x*( 1.0770866639543156165e11 + x*( 7.1964698876049131992e10 ))))))))
   elseif (z <= -0.0045954962127943706433)    # W >= -7.382, Y_-4
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -12.474405916395746052 + x*( -68180.335575543773385+ x*( -7.1846599845620093278e7 + x*( -2.3142688221759181151e10+ x*( -2.5801378337945295130e12 + x*( -9.5182748161386314616e13+ x*( -8.6073250986210321766e14 + x*( 1.4041941853339961439e14))))))))/( 1.0 + x*( 6852.5813734431100971+ x*( 8.5153001025466544379e6 + x*( 3.2146028239685694655e9+ x*( 4.2929807417453196113e11 + x*( 2.0234381161638084359e13+ x*( 2.8699933268233923842e14 + x*( 7.1210136651525477096e14 ))))))))
   elseif (z <= -0.0012001610672197724173)    # W >= -8.913, Y_-5
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -13.921651376890072595 + x*( -298789.56482388065526+ x*( -1.2313019937322092334e9 + x*( -1.5556149081899508970e12+ x*( -6.8685341106772708734e14 + x*( -1.0290616275933266835e17+ x*( -4.1404683701619648471e18 + x*( -1.4423309998006368397e19))))))))/( 1.0 + x*( 26154.955236499142433+ x*( 1.2393087277442041494e8 + x*( 1.7832922702470761113e11+ x*( 9.0772608163810850446e13 + x*( 1.6314734740054252741e16+ x*( 8.8371323861233504533e17 + x*( 8.4166620643385013384e18 ))))))))
   elseif (z <= -0.00030728805932191499844)   # W >= -10.433, Y_-6
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -15.377894224591557534 + x*( -1.3122312005096979952e6+ x*( -2.1408157022111737888e10 + x*( -1.0718287431557811808e14+ x*( -1.8849353524027734456e17 + x*( -1.1394858607309311995e20+ x*( -1.9261555088729141590e22 + x*( -3.9978452086676901296e23))))))))/( 1.0 + x*( 101712.86771760620046+ x*( 1.8728545945050381188e9 + x*( 1.0469617416664402757e13+ x*( 2.0704349060120443049e16 + x*( 1.4464907902386074496e19+ x*( 3.0510432205608900949e21 + x*( 1.1397589139790739717e23 ))))))))
   elseif (z <= -0.000077447159838062184354)  # W >= -11.946, Y_-7
       x=-z/(x0+sqrt(z-z0))
       dwm1c = ( -16.841701411264981596 + x*( -5.7790823257577138416e6+ x*( -3.7757230791256404116e11 + x*( -7.5712133742589860941e15+ x*( -5.3479338916011465685e19 + x*( -1.3082711732297865476e23+ x*( -9.1462777004521427440e25 + x*( -8.9602768119263629340e27))))))))/( 1.0 + x*( 401820.46666230725328+ x*( 2.9211518136900492046e10 + x*( 6.4456135373410289079e14+ x*( 5.0311809576499530281e18 + x*( 1.3879041239716289478e22+ x*( 1.1575146167513516225e25 + x*( 1.7199220185947756654e27 ))))))))
   elseif (z <= -4.5808119698158173174e-17)     # W >= -41.344, V_-8
       u=log(-z) #? log 
       dwm1c = ( -2.0836260384016439265 + u*( 1.6122436242271495710+ u*( 5.4464264959637207619 + u*( -3.0886331128317160105+ u*( 0.46107829155370137880 + u*( -0.023553839118456381330+ u*( 0.00040538904170253404780 + u*( -1.7948156922516825458e-6))))))))/( 1.0 + u*( 2.3699648912703015610+ u*( -2.1249449707404812847 + u*( 0.38480980098588483913+ u*( -0.021720009380176605969 + u*( 0.00039405862890608636876+ u*( -1.7909312066865957905e-6 + u*( 3.1153673308133671452e-12 ))))))))
   elseif (z <= -6.1073672236594792982e-79)     # W >= -185.316, V_-9
       u=log(-z) #? log 
       dwm1c = ( 0.16045383766570541409 + u*( 2.2214182524461514029+ u*( -0.94119662492050892971 + u*( 0.091921523818747869300+ u*( -0.0029069760533171663224 + u*( 0.000032707247990255961149+ u*( -1.2486672336889893018e-7 + u*( 1.2247438279861785291e-10))))))))/( 1.0 + u*( -0.70254996087870332289+ u*( 0.080974347786703195026 + u*( -0.0027469850029563153939+ u*( 0.000031943362385183657062 + u*( -1.2390620687321666439e-7+ u*( 1.2241636115168201999e-10 + u*( -1.0275718020546765400e-17 ))))))))
   elseif (z < 0.0)   # V_-10
       u=log(-z) #? log 
       dwm1c = ( -1.2742179703075440564 + u*( 1.3696658805421383765+ u*( -0.12519345387558783223 + u*( 0.0025155722460763844737+ u*( -0.000015748033750499977208 + u*( 3.4316085386913786410e-8+ u*( -2.5025242885340438533e-11 + u*( 4.6423885014099583351e-15))))))))/( 1.0 + u*( -0.11420006474152465694+ u*( 0.0024285233832122595942 + u*( -0.000015520907512751723152+ u*( 3.4120534760396002260e-8 + u*( -2.4981056186450274587e-11+ u*( 4.6419768093059706079e-15 + u*( -1.3608713936942602985e-23 ))))))))
   else
       # throw(DomainError("Expected z < 0.0 but got $z."))
       return -Inf;
   end
   return dwm1c
end


# Same as lambert_dw0c but using evalpoly() !
# NOTICE: Input arguement is NOT z but its com <= ent def !=  as zc = z+1/e
@inline @fastmath function lambert_dw0c_ep(zc ::Float64) ::Float64
    #   50-bit accuracy computation of principal branch of Lambert W function, W_0(z),
    #   by piecewise minimax rational function approximation
    #
    #   NOTICE: Input arguement is NOT z but its com <= ent def !=  as zc = z+1/e
    #
    #   Coded by T. Fukushima <Toshio.Fukushima@nao.ac.jp>
    #
    #   Reference: T. Fukushima (2020) to be submitted
    #     "Precise and fast computation of Lambert W-functions by piecewise
    #      rational function approximation with varia <= transformation"
 
    if (zc < 0.0) 
       throw(DomainError("argument out of ra >=  zc= $zc."))
       return NaN;
   elseif (zc <= 2.5498939065034735716)        # W <= 0.893, X_1
       x=sqrt(zc)
       dw0c = evalpoly(x, ( -0.9999999999999998890, -2.7399668668203659304, 0.026164207726990399347, 6.370916807894900917, 7.101328651785402668, 2.9800826783006852573, 0.48819596813789865043, 0.023753035787333611915, 0.00007736576009377243100 )) /
            evalpoly(x, ( 1.0, 5.071610848417428005, 9.986838818354528337, 9.660755192207886908, 4.7943728991336119052, 1.1629703477704522300, 0.11849462500733755233, 0.0034326525132402226488 ));
   elseif (zc <= 43.613924462669367895)    # W <= 2.754, X_2
       x=sqrt(zc)
       dw0c = evalpoly(x, ( -0.99997801800578916749, -0.70415751590483602272, 2.1232260832802529071, 2.3896760702935718341, 0.77765311805029175244, 0.089686698993644741433, 0.0033062485753746403559, 0.000025106760479132851033)) /
            evalpoly(x, ( 1.0, 3.0356026828085410884, 3.1434530151286777057, 1.3723156566592447275, 0.25844697415744211142, 0.019551162251819044265, 0.00048775933244530123101, 2.3165116841073152717e-6 ));
   elseif (zc <= 598.45353371878276946)    # W <= 4.821, X_3
       x=sqrt(zc)
       dw0c = evalpoly(x, ( -0.98967420337273506393, 0.59587680606394382748, 1.4225083018151943148, 0.44882889168323809798, 0.044504943332390033511, 0.0015218794835419578554, 0.000016072263556502220023, 3.3723373020306510843e-8)) /
            evalpoly(x, ( 1.0, 1.6959402394626198052, 0.80968573415500900896, 0.14002034999817021955, 0.0093571878493790164480, 0.00023251487593389773464, 1.8060170751502988645e-6, 2.5750667337015924224e-9 ));
   elseif (zc <= 8049.4919850757619109)    # W <= 7.041, X_4
       x=sqrt(zc)
       dw0c = evalpoly(x, ( -0.77316491997206225517, 1.1391333504296703783, 0.43116117255217074492, 0.035773078319037507449, 0.00096441640580559092740, 8.9723854598675864757e-6, 2.5623503144117723217e-8, 1.4348813778416631453e-11)) /
        evalpoly(x, ( 1.0, 0.74657287456514418083, 0.12629777033419350576, 0.0069741512959563184881, 0.00014089339244355354892, 1.0257432883152943078e-6, 2.2902687190119230940e-9, 9.2794231013264501664e-13 ));
   elseif (zc <= 111124.95412121781420)    # W <= 9.380, X_5
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 0.12007101671553688430, 0.83352640829912822896, 0.070142775916948337582, 0.0014846357985475124849, 0.000010478757366110155290, 2.5715892987071038527e-8, 1.9384214479606474749e-11, 2.8447049039139409652e-15)) / 
              evalpoly(x, ( 1.0, 0.25396738845619126630, 0.012839238907330317393, 0.00020275375632510997371, 1.1482956073449141384e-6, 2.3188370605674263647e-9, 1.4271994165742563419e-12, 1.5884836942394796961e-16 ));
   elseif (zc <= 1.5870429812082297112e6)    # W <= 11.809, X_6
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 1.7221104439937710112, 0.39919594286484275605, 0.0079885540140685028937, 0.000042889742253257920541, 7.8146828180529864981e-8, 4.9819638764354682359e-11, 9.7650889714265294606e-15, 3.7052997281721724439e-19)) / 
            evalpoly(x, ( 1.0, 0.074007438118020543008, 0.0010333501506697740545, 4.4360858035727508506e-6, 6.7822912316371041570e-9, 3.6834356707639492021e-12, 6.0836159560266041168e-16, 1.8149869335981225316e-20 ));
   elseif (zc <= 2.3414708401875459509e7)    # W <= 14.308, X_7
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 3.7529314023434544256, 0.15491342690357806525, 0.00075663140675900784505, 1.0271609235969979059e-6, 4.7853247675930066150e-10, 7.8328040770275474410e-14, 3.9433033758391036653e-18, 3.8232862205660283978e-23)) /
            evalpoly(x, ( 1.0, 0.020112985338854443555, 0.000074712286154830141768, 8.4800598003693837469e-8, 3.4182424130376911762e-11, 4.8866259139690957899e-15, 2.1223373626834634178e-19, 1.6642985671260582515e-24 ));
   elseif (zc <= 3.5576474308009965225e8)    # W <= 16.865, X_8
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 6.0196542055606555577, 0.053496672841797864762, 0.000064340849275316501519, 2.1969090100095967485e-8, 2.5927988937033061070e-12, 1.0779198161801527308e-16, 1.3780424091017898301e-21, 3.3768973150742552802e-27)) / 
       evalpoly(x, ( 1.0, 0.0052809683704233371675, 5.1020501219389558082e-6, 1.5018312292270832103e-9, 1.5677706636413188379e-13, 5.7992041238911878361e-18, 6.5133170770320780259e-23, 1.3205080139213406071e-28 ));
   elseif (zc <= 5.5501716296163627854e9)    # W <= 19.468, X_9
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 8.4280268500989701597, 0.017155758546279713315, 5.0836620669829321508e-6, 4.3354903691832581802e-10, 1.2841017145645583385e-14, 1.3419106769745885927e-19, 4.3101698455492225750e-25, 2.6422433422088187549e-31)) / 
       evalpoly(x, ( 1.0, 0.0013572006754595300315, 3.3535243481426203694e-7, 2.5206969246421264128e-11, 6.7136226273060530496e-16, 6.3324226680854686574e-21, 1.8128167400013774194e-26, 9.3662030058136796889e-33 ));
   elseif (zc <= 8.8674704839657775331e10)   # W <= 22.112, X_10
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 10.931063230472498189, 0.0052224234540245532982, 3.7996105711810129682e-7, 8.0305793533410355824e-12, 5.9139785627090605866e-17, 1.5382020359533028724e-22, 1.2288944126268109432e-28, 1.8665089270660122398e-35)) / 
            evalpoly(x, ( 1.0, 0.00034328702551197577797, 2.1395351518538844476e-8, 4.0524170186631594159e-13, 2.7181424315335710420e-18, 6.4538986638355490894e-24, 4.6494613785888987942e-30, 6.0442024367299387616e-37 ));
   elseif (zc <= 1.4477791865272902816e12)   # W <= 24.791, X_11
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 13.502943080893871412, 0.0015284636506346264572, 2.7156967358262346166e-8, 1.4110394051242161772e-13, 2.5605734311219728461e-19, 1.6421293724425337463e-25, 3.2324944691435843553e-32, 1.2054662641251783155e-39)) / 
            evalpoly(x, ( 1.0, 0.000085701512879089462255, 1.3311244435752691563e-9, 6.2788924440385347269e-15, 1.0483788152252204824e-20, 6.1943499966249160886e-27, 1.1101567860340917294e-33, 3.5897381128308962590e-41 ));
   elseif (zc <= 2.4111458632511851931e13)   # W <= 27.500, X_12
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 16.128076167439014775, 0.00043360385176467069131, 1.8696403871820916466e-9, 2.3691795766901486045e-15, 1.0503191826963154893e-21, 1.6461927573606764263e-28, 7.9138276083474522931e-36, 7.1845890343701668760e-44)) / 
            evalpoly(x, ( 1.0, 0.000021154255263102938752, 8.1006115442323280538e-11, 9.4155986022169905738e-17, 3.8725127902295302254e-23, 5.6344651115570565066e-30, 2.4860951084210029191e-37, 1.9788304737427787405e-45 ));
   elseif (zc <= 4.0897036442600845564e14)   # W <= 30.236, X_13
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 18.796301105534486604, 0.00011989443339646469157, 1.2463377528676863250e-10, 3.8219456858010368172e-17, 4.1055693930252083265e-24, 1.5595231456048464246e-31, 1.8157173553077986962e-39, 3.9807997764326166245e-48)) / 
            evalpoly(x, ( 1.0, 5.1691031988359922329e-6, 4.8325571823313711932e-12, 1.3707888746916928107e-18, 1.3754560850024480337e-25, 4.8811882975661805184e-33, 5.2518641828170201894e-41, 1.0192119593134756440e-49 ));
   elseif (zc <= 7.0555901476789972402e15)   # W <= 32.996, X_14
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 21.500582830667332906, 0.000032441943237735273768, 8.0764963416837559148e-12, 5.9488445506122883523e-19, 1.5364106187215861531e-26, 1.4033231297002386995e-34, 3.9259872712305770430e-43, 2.0629086382257737517e-52)) / 
            evalpoly(x, ( 1.0, 1.2515317642433850197e-6, 2.8310314214817074806e-13, 1.9423666416123637998e-20, 4.7128616004157359714e-28, 4.0433347391839945960e-36, 1.0515141443831187271e-44, 4.9316490935436927307e-54 ));
   elseif (zc <= 1.2366607557976727287e17)   # W <= 35.779, X_15
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 24.235812532416977267, 8.6161505995776802509e-6, 5.1033431561868273692e-13, 8.9642393665849638164e-21, 5.5254364181097420777e-29, 1.2045072724050605792e-37, 8.0372997176526840184e-47, 1.0049140812146492611e-56)) / 
            evalpoly(x, ( 1.0, 3.0046761844749477987e-7, 1.6309104270855463223e-14, 2.6842271030298931329e-22, 1.5619672632458881195e-30, 3.2131689030397984274e-39, 2.0032396245307684134e-48, 2.2520274554676331938e-58 ));
   elseif (zc <= 2.1999373487930999775e18)   # W <= 38.582, X_16
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 26.998134347987436511, 2.2512257767572285866e-6, 3.1521230759866963941e-14, 1.3114035719790631541e-22, 1.9156784033962366146e-31, 9.8967003053444799163e-41, 1.5640423898448433548e-50, 4.6216193040664872606e-61)) / 
            evalpoly(x, ( 1.0, 7.1572676370907573898e-8, 9.2500506091115760826e-16, 3.6239819582787573031e-24, 5.0187712493800424118e-33, 2.4565861988218069039e-42, 3.6435658433991660284e-52, 9.7432490640155346004e-63 ));
   elseif (zc <= 3.9685392198344016155e19)   # W <= 41.404, X_17
       x=sqrt(zc)
       dw0c = evalpoly(x, ( 29.784546702831970770, 5.7971764392171329944e-7, 1.9069872792601950808e-15, 1.8668700870858763312e-24, 6.4200510953370940075e-34, 7.8076624650818968559e-44, 2.9029638696956315654e-54, 2.0141870458566179853e-65)) / 
            evalpoly(x, ( 1.0, 1.6924463180469706372e-8, 5.1703934311254540111e-17, 4.7871532721560069095e-26, 1.5664405832545149368e-35, 1.8113137982381331398e-45, 6.3454150289495419529e-56, 4.0072964025244397967e-67 ));
   elseif (zc <= 1.4127075145274652069e104)   # W <= 234.358, U_18
       y=log(zc) #? log 
       dw0c = evalpoly(y, ( 0.74413499460126776143, 0.41403243618005911160, 0.26012564166773416170, 0.021450457095960295520, 0.00051872377264705907577, 4.3574693568319975996e-6, 1.2363066058921706716e-8, 9.0194147766309957537e-12)) / 
            evalpoly(y, ( 1.0, 0.33487811067467010907, 0.023756834394570626395, 0.00054225633008907735160, 4.4378980052579623037e-6, 1.2436585497668099330e-8, 9.0225825867631852215e-12, -4.2057836270109716654e-19 ));
   else    #   U_19
       y=log(zc) #? log 
       dw0c = evalpoly(y, ( -0.61514412812729761526, 0.67979310133630936580, 0.089685353704585808963, 0.0015644941483989379249, 7.7349901878176351162e-6, 1.2891647546699435229e-8, 7.0890325988973812656e-12, 9.8419790334279711453e-16)) / 
            evalpoly(y, ( 1.0, 0.097300263710401439315, 0.0016103672748442058651, 7.8247741003077000012e-6, 1.2949261308971345209e-8, 7.0986911219342827130e-12, 9.8426285042227044979e-16, -1.5960147252606055352e-24 ));
   end
   return dw0c
end

# Same as lambert_dwm1c but using evalpoly() !
# NOTICE:  == ired are two input arguements z and its com <= ent def !=  as zc = z+1/e
@inline @fastmath function lambert_dwm1c_ep(z ::Float64, zc ::Float64) ::Float64
    #   50-bit accuracy computation of secondary branch of Lambert W function, W_-1(z),
    #   by piecewise minimax rational function approximation
    #
    #   NOTICE:  == ired are two input arguements z and its com <= ent def !=  as zc = z+1/e
    #
    #   Coded by T. Fukushima <Toshio.Fukushima@nao.ac.jp>
    #
    #   Reference: T. Fukushima (2020) to be submitted
    #     "Precise and fast computation of Lambert W-functions by piecewise
    #      rational function approximation with varia <= transformation"
 
    z0 = -0.36787944117144232160    # z0 = -1/e
    x0 = +0.60653065971263342360    # x0 = sqrt(1/e)
 
    if (zc < 0.0) 
       throw(DomainError("argument out of ra >=  zc= $zc."))
       return NaN;
   elseif (z <= -0.3542913309442164)          # W >= -1.3, X_-1
       x=sqrt(zc)
       dwm1c = evalpoly(x, ( -1.0000000000000001110, 4.2963016178777127009, -4.0991407924007457612, -6.8442842200833309724, 17.084773793345271001, -13.015133123886661124, 3.9303608629539851049, -0.34636746512247457319)) / 
            evalpoly(x, ( 1.0, -6.6279455994747624059, 17.740962374121397994, -24.446872319343475890, 18.249006287190617068, -7.0580758756624790550, 1.1978786762794003545, -0.053875778140352599789 ));
   elseif (z <= -0.18872688282289434049)          # W >= -2.637, Y_-1
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -8.2253155264446844854, -813.20706732001487178, -15270.113237678509000, -79971.585089674149237, -103667.54215808376511, 42284.755505061257427, 74953.525397605484884, 10554.369146366736811)) / 
            evalpoly(x, ( 1.0, 146.36315161669567659, 3912.4761372539240712, 31912.693749754847460, 92441.293717108619527, 94918.733120470346165, 29531.165406571745340, 1641.6808960330370987 ));
   elseif (z <= -0.060497597226958343647)     # W >= -4.253, Y_-2
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -9.6184127443354024295, -3557.8569043018004121, -254015.59311284381043, -5.3923893630670639391e6, -3.6638257417536896798e7, -6.1484319486226966213e7, 3.0421690377446134451e7, 3.9728139054879320452e7)) / 
            evalpoly(x, ( 1.0, 507.40525628523300801, 46852.747159777876192, 1.3168304640091436297e6, 1.3111690693712415242e7, 4.6142116445258015195e7, 4.8982268956208830876e7, 9.1959100987983855122e6 ));
   elseif (z <= -0.017105334740676008194)     # W >= -5.832, Y_-3
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -11.038489462297466388, -15575.812882656619195, -4.2492947304897773433e6, -3.5170245938803423768e8, -9.8659163036611364640e9, -8.6195372303305003908e10, -1.3286335574027616000e11, 1.5989546434420660462e11)) / 
            evalpoly(x, ( 1.0, 1837.0770693017166818, 612840.97585595092761, 6.2149181398465483037e7, 2.2304011314443083969e9, 2.8254232485273698021e10, 1.0770866639543156165e11, 7.1964698876049131992e10 ));
   elseif (z <= -0.0045954962127943706433)    # W >= -7.382, Y_-4
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -12.474405916395746052, -68180.335575543773385, -7.1846599845620093278e7, -2.3142688221759181151e10, -2.5801378337945295130e12, -9.5182748161386314616e13, -8.6073250986210321766e14, 1.4041941853339961439e14)) / 
            evalpoly(x, ( 1.0, 6852.5813734431100971, 8.5153001025466544379e6, 3.2146028239685694655e9, 4.2929807417453196113e11, 2.0234381161638084359e13, 2.8699933268233923842e14, 7.1210136651525477096e14 ));
   elseif (z <= -0.0012001610672197724173)    # W >= -8.913, Y_-5
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -13.921651376890072595, -298789.56482388065526, -1.2313019937322092334e9, -1.5556149081899508970e12, -6.8685341106772708734e14, -1.0290616275933266835e17, -4.1404683701619648471e18, -1.4423309998006368397e19)) / 
            evalpoly(x, ( 1.0, 26154.955236499142433, 1.2393087277442041494e8, 1.7832922702470761113e11, 9.0772608163810850446e13, 1.6314734740054252741e16, 8.8371323861233504533e17, 8.4166620643385013384e18 ));
   elseif (z <= -0.00030728805932191499844)   # W >= -10.433, Y_-6
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -15.377894224591557534, -1.3122312005096979952e6, -2.1408157022111737888e10, -1.0718287431557811808e14, -1.8849353524027734456e17, -1.1394858607309311995e20, -1.9261555088729141590e22, -3.9978452086676901296e23)) / 
            evalpoly(x, ( 1.0, 101712.86771760620046, 1.8728545945050381188e9, 1.0469617416664402757e13, 2.0704349060120443049e16, 1.4464907902386074496e19, 3.0510432205608900949e21, 1.1397589139790739717e23 ));
   elseif (z <= -0.000077447159838062184354)  # W >= -11.946, Y_-7
       x=-z/(x0+sqrt(z-z0))
       dwm1c = evalpoly(x, ( -16.841701411264981596, -5.7790823257577138416e6, -3.7757230791256404116e11, -7.5712133742589860941e15, -5.3479338916011465685e19, -1.3082711732297865476e23, -9.1462777004521427440e25, -8.9602768119263629340e27)) / 
            evalpoly(x, ( 1.0, 401820.46666230725328, 2.9211518136900492046e10, 6.4456135373410289079e14, 5.0311809576499530281e18, 1.3879041239716289478e22, 1.1575146167513516225e25, 1.7199220185947756654e27 ));
   elseif (z <= -4.5808119698158173174e-17)     # W >= -41.344, V_-8
       u=log(-z) #? log 
       dwm1c = evalpoly(u, ( -2.0836260384016439265, 1.6122436242271495710, 5.4464264959637207619, -3.0886331128317160105, 0.46107829155370137880, -0.023553839118456381330, 0.00040538904170253404780, -1.7948156922516825458e-6)) / 
            evalpoly(u, ( 1.0, 2.3699648912703015610, -2.1249449707404812847, 0.38480980098588483913, -0.021720009380176605969, 0.00039405862890608636876, -1.7909312066865957905e-6, 3.1153673308133671452e-12 ));
   elseif (z <= -6.1073672236594792982e-79)     # W >= -185.316, V_-9
       u=log(-z) #? log 
       dwm1c = evalpoly(u, ( 0.16045383766570541409, 2.2214182524461514029, -0.94119662492050892971, 0.091921523818747869300, -0.0029069760533171663224, 0.000032707247990255961149, -1.2486672336889893018e-7, 1.2247438279861785291e-10)) / 
            evalpoly(u, ( 1.0, -0.70254996087870332289, 0.080974347786703195026, -0.0027469850029563153939, 0.000031943362385183657062, -1.2390620687321666439e-7, 1.2241636115168201999e-10, -1.0275718020546765400e-17 ));
   elseif (z < 0.0)   # V_-10
       u=log(-z) #? log 
       dwm1c = evalpoly(u, ( -1.2742179703075440564, 1.3696658805421383765, -0.12519345387558783223, 0.0025155722460763844737, -0.000015748033750499977208, 3.4316085386913786410e-8, -2.5025242885340438533e-11, 4.6423885014099583351e-15)) / 
            evalpoly(u, ( 1.0, -0.11420006474152465694, 0.0024285233832122595942, -0.000015520907512751723152, 3.4120534760396002260e-8, -2.4981056186450274587e-11, 4.6419768093059706079e-15, -1.3608713936942602985e-23 ));
   else
       # throw(DomainError("Expected z < 0.0 but got $z."))
       return -Inf;
   end
   return dwm1c
end




# W₀(z) [-1/e,∞) Float64 fast
@inline @fastmath function lambertw0_fast(z ::Float64) ::Float64
    return lambert_dw0c_ep(z + 1/MathConstants.e);
end

@inline @fastmath function lambertw0(z ::Float64) ::Float64
    oneoe = 1/MathConstants.e;
    z == -oneoe && return -1;
    return halley_lambertw(lambert_dw0c_ep(z + oneoe), z);
end

# W₀(z) [-1/e,∞) BigFloat
function lambertw0(z ::BigFloat, maxiter=100) ::BigFloat
    ep = 2*eps(BigFloat); # we need 2*eps here !
    z64 ::Float64 = Float64(z);
    w64 ::Float64 = lambertw0_fast(z64);
    w = big(halley_lambertw(w64,z64))
    for i = 1:maxiter
        # wₙ = halley_lambertw(w, z);
        wₙ = quartic_m4(w, z);
        if abs(wₙ - w) <= ep #TODO: catch 2 calue cycle !
            # println(" break i ",i);
            break;
        end
        w = wₙ;
    end
    return w
end

lambertw0(z ::Irrational)  = lambertw0(float(z));
lambertw0(z ::Irrational, maxiter)  = lambertw0(float(z), maxiter);

lambertw0(z ::Union{Integer, Rational})  = lambertw0(float(z));
lambertw0(z ::Union{Integer, Rational}, maxiter)  = lambertw0(float(z), maxiter);

# W₋₁(z) (-1/e,0) Float64 fast    
@inline @fastmath function lambertwm1_fast(z ::Float64) ::Float64
    return lambert_dwm1c_ep(z, z + 1/MathConstants.e);
end

@inline @fastmath function lambertwm1(z ::Float64) ::Float64
    z == 0 && return -Inf;
    return halley_lambertw(lambert_dwm1c_ep(z, z + 1/MathConstants.e), z);
end

# W₋₁(z) (-1/e,0) BigFloat
function lambertwm1(z ::BigFloat, maxiter=100) ::BigFloat
    z == 0 && return -Inf;
    ep = 2*eps(BigFloat); # we need 2*eps here !
    z64 ::Float64 = Float64(z);
    w64 ::Float64 = lambertwm1_fast(z64)
    w = big(halley_lambertw(w64,z64))
    for i = 1:maxiter
        # wₙ = halley_lambertw(w, z);
        wₙ = quartic_m4(w, z);
        if abs(wₙ - w) <= ep #TODO: catch 2 calue cycle !
            # println(" break i ",i,); # "  ",wₙ
            break;
        end
        w = wₙ;
    end
    return w
end


lambertwm1(z ::Irrational)  = lambertwm1(float(z));
lambertwm1(z ::Irrational, maxiter)  = lambertwm1(float(z), maxiter);

lambertwm1(z ::Union{Integer, Rational})  = lambertwm1(float(z));
lambertwm1(z ::Union{Integer, Rational}, maxiter)  = lambertwm1(float(z), maxiter);


#! Wright omega function

"""
    Wright omega function
    https://en.wikipedia.org/wiki/Wright_omega_function
    
    "Fast computation of Wright ω function by piecewise minimax rational function approximation"

    ω(0) == W₀(1) == 0.5671432904097838729999686622103555497538157871865125081351310792230457930866
    ω(1) == 1

    omega(x) + log(omega(x)) = x

    omega(x) = lambertw0(exp(x)) for real x!

    x = y + ln(y)
""" 

# ω(x) Float32
@inline @fastmath function womega(x ::Float32) ::Float32 
    #
    #   Single-precision computation of Wright"s omega function, omega(x),
    #   defined as the solution of nonlinear equation, omega(x) + log(omega(x)) = x
    #   by piecewise minimax rational function approximation
    #
    #   Toshio Fukushima <Toshio.Fukushima@nao.ac.jp> 2020/10/17
    #
    #isinf(x) && return Inf;
    x == -Inf && return 0;
    x == Inf && return Inf;

    if (x < 0.0) 
        if (x > -1.5361328125) 
            somega = ( 0.56714332412913594105 + x*( 0.30630103389199964412+ x*( 0.065488479920380545308 + x*( 0.0055153146890067064962 ))))/(1.0 + x*( -0.098030204674124009540+ x*( 0.048080407489229590984 + x*( -0.0059765940139383360353 ))));
        else
            z=exp(x);
            somega=z*( 0.99999994780930851871 + z*( 1.7117216658039714225+ z*( 0.20020967452709029641 )))/(1.0 + z*( 2.7117066932638613716 + z*( 1.4126040690619524729 )));
        end
    elseif (x < 2.203125) 
        somega = ( 0.56714325667175331149 + x*( 0.44204947590429385038+ x*( 0.14123153221018897281 + x*( 0.019283157443287762404 ))))/(1.0 + x*( 0.14132449647937415562+ x*( 0.028964643040169025625 + x*( -0.00058168896756415762409 ))));
    elseif (x < 7.6552734375) 
        somega = ( 0.55937806741718427872 + x*( 0.67956527580178828073+ x*( 0.29360195457159048827 + x*( 0.077448100646826501154 ))))/(1.0 + x*( 0.52881376120351465894+ x*( 0.081772927185747068186 + x*( -0.000068175768290343786070 ))));
    elseif (x < 30.7646484375) 
        somega = ( 0.66104047907992020205 + x*( 0.37877035567803743984+ x*( 0.19919433126748008768 )))/(1.0 + x*( 0.20879650605789737260+ x*( -0.00016947736903018769532 + x*( 2.2611377444850837652e-6+ x*( -1.4348602911552556686e-8 )))));
    elseif (x < 185.2001953125) 
        somega = ( -0.055532700852464479829 + x*( 0.58620887075870905428+ x*( 0.11673091868753091923 + x*( 0.0013099637156785891028 ))))/(1.0 + x*( 0.12434745866188878179+ x*( 0.0013137744766148976193 + x*( -2.9307591501706925573e-9 ))));
    elseif (x < 2190.048828125) 
        somega = ( -2.4215867305897768568 + x*( 0.91134105496756911035+ x*( 0.016155964675360530461 + x*( 0.000021533578597524674756 ))))/(1.0 + x*( 0.016326356740840015012+ x*( 0.000021540941180994856067 + x*( -6.2370181632692660205e-13 ))));
    elseif (x < 139137.1328125) 
        somega = ( -5.4363612354490970051 + x*( 0.99287748389227933136+ x*( 0.00084052457998910664879 + x*( 4.8894415007562386657e-8 ))))/(1.0 + x*( 0.00084106912846565636966+ x*( 4.8895005847922485747e-8 + x*( -1.4160730956370852941e-18 ))));
    else
        somega = x*(1.0-log(x) / (x+1.0));   # Single Newton correction applied to asymptotic solution, x
    end
    return somega;
end

# ω(x) Float64
@inline @fastmath function womega(x ::Float64) ::Float64 
    #
    #   Double-precision computation of Wright"s omega function, omega(x),
    #   defined as the solution of nonlinear equation, omega(x) + log(omega(x)) = x
    #   by piecewise minimax rational function approximation
    #
    #   Toshio Fukushima <Toshio.Fukushima@nao.ac.jp> 2020/10/17
    #
    x == -Inf && return 0;
    x == Inf && return Inf;

    if (x < 0.0) 
        if (x > -1.7969970703125) 
            domega = ( 0.56714329040978393597 + x*( 0.40127273991556628416+ x*( 0.16948622586211161962 + x*( 0.046665932688016784538+ x*( 0.0085703273322828587102 + x*( 0.0010434401063688186806+ x*( 0.000077800083733980925540 + x*2.7204772831680988214e-6 )))))))/(1.0 + x*( 0.069429514456939747074+ x*( 0.12462836200029189075 + x*( -0.0038952406229635946107+ x*( 0.0044555853359591692983 + x*( -0.00041123146046694083146+ x*( 0.000059020981275047793275 + x*( -3.5492274716282929464e-6 ))))))));
        else
            z = exp(x);
            domega=z*( 0.9999999999999998931 + z*( 5.0745983953466943659+ z*( 8.2606009602900812771 + z*( 4.7024717601199799556+ z*( 0.65482227387481846600 )))))/(1.0 + z*( 6.0745983953465398344+ z*( 12.835199355673150217 + z*( 11.092440186086891869+ z*( 3.4850593056113482442 + z*( 0.23505959341677892216 ))))));
        end
    elseif (x < 2.6706581115722656250) 
        domega = ( 0.56714329040978381003 + x*( 0.77356892277028762975+ x*( 0.51832380984628428402 + x*( 0.21755702154802737458+ x*( 0.061224277815768787167 + x*( 0.011518883525838608343+ x*( 0.0013449706921997516673 + x*0.000075896892739201294405 )))))))/(1.0 + x*( 0.72587064520843295454+ x*( 0.32082921273199275229 + x*( 0.086948809834337515365+ x*( 0.015394071575832887833 + x*( 0.0016360582874079300062+ x*( 0.000078307305162627353776 + x*( -3.1442237428129457031e-8 ))))))));
    elseif (x < 9.6968069076538085938) 
        domega = ( 0.56713501343190366161 + x*( 0.78382455352242915730+ x*( 0.51756353812338515893 + x*( 0.20726853039949915898+ x*( 0.053010998762456477240 + x*( 0.0083925496655250859740+ x*( 0.00066092716371736707786 + x*0.000013614908670113335271 )))))))/(1.0 + x*( 0.74389593435342377573+ x*( 0.30809335954228387897 + x*( 0.074470884949693883215+ x*( 0.010667765269781492069 + x*( 0.00072813578520727560898+ x*( 0.000013735475456227982957 + x*( -3.9617637001432374240e-10 ))))))));
    elseif (x < 38.007662773132324219) 
        domega = ( 0.56401353907858227635 + x*( 0.71556555400973446955+ x*( 0.40606219668682194772 + x*( 0.13098742100043090882+ x*( 0.023792021846516585517 + x*( 0.0014712087559790111411+ x*( 0.000028262095549717529699 + x*( 1.3176541606714501011e-7 ))))))))/(1.0 + x*( 0.61723923788369990709+ x*( 0.19472671474858151447 + x*( 0.029166374057621022340+ x*( 0.0016049364440594188061 + x*( 0.000029097481892430916950+ x*( 1.3204819260704942813e-7 + x*( -2.2759460679274951500e-13 ))))))));
    elseif (x < 224.05800342559814453) 
        domega = ( 0.74904304655011303763 + x*( 0.41475765300820204606+ x*( 0.26229090010420327086 + x*( 0.022231827737742717397+ x*( 0.00055769724215842159151 + x*( 4.8929940562358938904e-6+ x*( 1.4576036364817152103e-8 + x*( 1.1211845148576067899e-11+ x*( 5.8617957261146552764e-19 )))))))))/(1.0 + x*( 0.33914957488601671439+ x*( 0.024691496687221735503 + x*( 0.00058391033761937493228+ x*( 4.9870990455400355673e-6 + x*( 1.4666816425760107778e-8+ x*( 1.1216014296054046261e-11 )))))));
    elseif (x < 1318.8293657302856445) 
        domega = ( -0.52847240530691242510 + x*( 0.66439555408432191153+ x*( 0.095734165623936586970 + x*( 0.0017984402717797458483+ x*( 9.5608645967684762747e-6 + x*( 1.7130211053307026173e-8+ x*( 1.0127406535507852349e-11 + x*( 1.5119473539633986399e-15 ))))))))/(1.0 + x*( 0.10436793508415000619+ x*( 0.0018544824235611654910 + x*( 9.6789573725809544085e-6+ x*( 1.7211790608220386441e-8 + x*( 1.0142134330206435119e-11+ x*( 1.5120546649245173808e-15 + x*( -2.8371714954759691899e-24 ))))))));
    elseif (x < 9901.8982133865356445) 
        domega = ( -2.7265755587675828255 + x*( 0.91886110507404644509+ x*( 0.015437556964724977333 + x*( 0.000042379757069402316910+ x*( 3.3788408654334341745e-8 + x*( 9.0995247456328828154e-12+ x*( 8.0541623626962845941e-16 + x*( 1.7892200405606258679e-20 ))))))))/(1.0 + x*( 0.015717280527236316462+ x*( 0.000042640053213855619617 + x*( 3.3868168872656516608e-8+ x*( 9.1075366623274182120e-12 + x*( 8.0562465016652583741e-16+ x*( 1.7892388148342752402e-20 + x*( - 7.2802540742878224330e-31 ))))))));
    elseif (x < 104729.98977375030518) 
        domega = ( -4.9758448332804315705 + x*( 0.98672919773901375858+ x*( 0.0018048502584507968137 + x*( 5.6727618232662977651e-7+ x*( 5.1693477737117469717e-11 + x*( 1.5763106040543895563e-15+ x*( 1.5615457093141147610e-20 + x*( 3.8348282655423816844e-26 ))))))))/(1.0 + x*( 0.0018098048079446830033+ x*( 5.6778598593151384010e-7 + x*( 5.1710727052210149252e-11+ x*( 1.5765001969393981202e-15 + x*( 1.5615988471610678184e-20+ x*( 3.8348326592462094894e-26 + x*( -1.8376700258834952892e-38 ))))))));
    elseif (x < 1.7873714379758834839e6) 
        domega = ( -7.5064713916128040209 + x*( 0.99856667809261792330+ x*( 0.00014527404521491427728 + x*( 3.6058443746980183631e-9+ x*( 2.5487488372192215976e-14 + x*( 5.9071573396622281840e-20+ x*( 4.3540463254359589235e-26 + x*( 7.7870710830579392924e-33 ))))))))/(1.0 + x*( 0.00014531469783952414582+ x*( 3.6061610745034193796e-9 + x*( 2.5488287561466743981e-14+ x*( 5.9072215616613797183e-20 + x*( 4.3540591638996294464e-26+ x*( 7.7870717193388587180e-33 + x*( -1.8603410329812104693e-47 ))))))));
    elseif (x < 6.4666226364722251892e7) 
        domega = ( -10.553133866290087103 + x*( 0.99991182205756461588+ x*( 6.8147130642100950299e-6 + x*( 7.6772315747426585717e-12+ x*( 2.3749238044176130427e-18 + x*( 2.3156775350327431915e-25+ x*( 6.8906814806601365039e-33 + x*( 4.7733356492001687570e-41 ))))))))/(1.0 + x*( 6.8148234879449250418e-6+ x*( 7.6772685608307803918e-12 + x*( 2.3749276757415131404e-18+ x*( 2.3156787740031116785e-25 + x*( 6.8906824237918392311e-33+ x*( 4.7733356637141783505e-41 + x*( -1.5212714240163636517e-58 ))))))));
    elseif (x < 9.6537874592561578751e9) 
        domega = ( -14.453233847636304145 + x*( 0.99999773787655695790+ x*( 1.3384094485652721805e-7 + x*( 2.7649127536426257913e-15+ x*( 1.4462424184214411200e-23 + x*( 2.1739442557543959836e-32+ x*( 9.0218885020989014506e-42 + x*( 7.8687375038593681713e-52 ))))))))/(1.0 + x*( 1.3384099578765282610e-7+ x*( 2.7649130385236672771e-15 + x*( 1.4462424639425969762e-23+ x*( 2.1739442758770299520e-32 + x*( 9.0218885211281218582e-42+ x*( 7.8687375041325222089e-52 + x*( -2.9925825575484892462e-73 ))))))));
    elseif (x < 3.7284375517631785583e11) 
        domega = ( -19.911981551589239565 + x*( 0.99999998802702964239+ x*( 5.3193290756933022976e-10 + x*( 3.6315161298281125840e-20+ x*( 4.6372938690029442720e-31 + x*( 9.2610561378209620950e-43 ))))))/(1.0 + x*( 5.3193290845021667622e-10+ x*( 3.6315161310308030589e-20 + x*( 4.6372938692633433675e-31+ x*( 9.2610561378259071409e-43 )))))
    else
        domega = x*(1.0-log(x)/(x+1.0));   # Single Newton correction applied to asymptotic solution, x
    end
    return domega
end

# Fritsch, Shafer, and Crowley (FSC) iteration for womega function
@inline @fastmath function fsc_womega(w, z)
    r = z - w - log(w);
    wp1 = w+1;
    e = r/wp1*(2*wp1*(wp1+2/3*r)-r)/(2*wp1*(wp1+2/3*r)-2*r);
    return w*(1+e);
end

# ω(x) BigFloat
function womega(x ::BigFloat, maxiter=100) ::BigFloat
    x == -Inf && return BigFloat(0);
    x == Inf && return Inf;
    ep = 2*eps(BigFloat);
    x64 ::Float64 = Float64(x);
    w64 ::Float64 = womega(x64);
    w = big(w64);
    for i = 1:maxiter
        wₙ = fsc_womega(w, x);
        if abs(wₙ - w) <= ep 
            break;
        end
        w = wₙ;
    end
    return w
end

womega(x ::Irrational)  = womega(float(x));
womega(x ::Irrational, maxiter)  = womega(float(x), maxiter);

womega(x ::Union{Integer, Rational})  = womega(float(x));
womega(x ::Union{Integer, Rational}, maxiter)  = womega(float(x), maxiter);

#! Omega Ω constant

# Hlley's method for Omega constant, cubic convergence.
@inline @fastmath function halley_omega(o ::T) where T <: Number # 1*exp, 1*div, 5*mul, 7*mul
    eo = exp(o);
    return (2 + o*(4 + o + eo * o*o)) / (2 + o + eo*(2 + o*(2 + o)));
end

@inline @fastmath function big_omega()
    ep = eps(BigFloat);
    o = BigFloat("0.5671432904097838729999686622103555497538157871865125081351310792230457930866845666932194");
    for i = 1:100
        oₙ = halley_omega(o);
        if abs(oₙ - o) <= ep
            # println(" break i ",i);
            break;
        end
        o = oₙ;
    end
    return o;
end

Base.@irrational Ω 0.5671432904097838729999686622103555497538157871865125081351310792230457930866 (big_omega())

"""
    Ω = LambertW(1)
    Ω*exp(Ω) = 1
"""
Ω, const omega = Ω

end #module ReLambertW
